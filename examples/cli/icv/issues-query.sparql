PREFIX : <http://example.org/issues#>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

SELECT DISTINCT ?issue
  (if(BOUND(?t), "passed", "missing") AS ?typeArc)
  (if(BOUND(?state) && (?state=:unassigned || ?state=:assigned),
      "passed", "invalid") AS ?stateValue)
  (if(BOUND(?reportedBy), "passed", "missing") AS ?reportedByArc)
  (if(BOUND(?reportedOn), "passed", "missing") AS ?reportedOnArc)
  (if(!BOUND(?reportedByCount), "expected 1, got 0", 
   if(?reportedByCount=1, "passed", 
      CONCAT("expected 1, got ", STR(?reportedByCount)))) AS ?reportedByArcCount)
  (if(!BOUND(?reproducedOn) || ?reproducedOn > ?reportedOn,
      "passed", "bad sequence") AS ?reproducedOnSequence)
  (if(BOUND(?missingRelatedIssuesStr), ?missingRelatedIssuesStr, "passed")
      AS ?missingRelatedIssues)

  WHERE {

  # Get all viable :Issues by use of related predicates.
  { SELECT DISTINCT ?issue WHERE {
           { ?issue a :Issue }
     UNION { ?issue :reportedBy|:reportedOn|:reproducedBy|:reproducedOn|:related ?rprt }
    }
  }

  # Test for a type arc and state.
  OPTIONAL { ?issue a ?t FILTER (?t = :Issue) }
  OPTIONAL { ?issue :state ?state }

  # Must have 1 reportedBy.
  OPTIONAL { SELECT ?issue
      (SAMPLE(?reportedBy1) AS ?reportedBy)
      (COUNT(?reportedBy1) AS ?reportedByCount)
     WHERE {
      OPTIONAL { ?issue :reportedBy ?reportedBy1 }
    } GROUP BY ?issue
  }
  OPTIONAL { ?issue :reportedOn ?reportedOn }
  OPTIONAL { ?issue :reproducedBy ?reproducedBy }
  OPTIONAL { ?issue :reproducedOn ?reproducedOn }

  # All :related issues must be known entities.
  OPTIONAL {
    SELECT ?issue
      (GROUP_CONCAT(CONCAT("<", STR(?referent), ">"))
       AS ?missingRelatedIssuesStr) {

          # List of missing issues related to ?issue.
          SELECT ?issue ?referent
             (SUM(if(BOUND(?referentP), 1, 0)) AS ?referentCount)
           WHERE {
            ?issue :related ?referent
               OPTIONAL { ?referent ?referentP ?referentO }
          } GROUP BY ?issue ?referent
          HAVING (SUM(if(BOUND(?referentP), 1, 0)) = 0)
    } GROUP BY ?issue
  }
}