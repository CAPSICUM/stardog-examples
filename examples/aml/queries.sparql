# Node types
SELECT ?t (count(?a) as ?g)
WHERE {
    ?a a ?t .
    {
        select distinct ?t {
        ?a a ?t
        }
    }
}
GROUP BY ?t

tag:stardog:demo:aml:Address	1000
tag:stardog:demo:aml:BankAccount	1999
tag:stardog:demo:aml:Company	1000
tag:stardog:demo:aml:Person	1000
tag:stardog:demo:aml:Employee	50


# Relationship types
select ?relationship (count(*) as ?count)
{
  ?node ?relationship ?node2
}
group by ?relationship

SELECT ?p (count(?a) as ?g)
WHERE {
    ?a ?p ?b .
    {
        select distinct ?p {
            ?s ?p ?o
        }
    }
}
GROUP BY ?p

tag:stardog:demo:aml:city	1000
tag:stardog:demo:aml:street	1000
http://www.w3.org/2003/01/geo/wgs84_pos#lat	997
http://www.w3.org/1999/02/22-rdf-syntax-ns#type	5049
http://www.w3.org/2003/01/geo/wgs84_pos#long	997
tag:stardog:demo:aml:country	2000
tag:stardog:demo:aml:zipCode	148
tag:stardog:demo:aml:balance	1999
tag:stardog:demo:aml:number	1999
tag:stardog:demo:aml:description	1000
tag:stardog:demo:aml:name	1000
tag:stardog:demo:aml:lastName	1000
tag:stardog:demo:aml:firstName	1000
tag:stardog:demo:aml:email	1000
tag:stardog:demo:aml:hasAddress	2000
tag:stardog:demo:aml:hasBankAccount	1213
tag:stardog:demo:aml:company	150
tag:stardog:demo:aml:share	150
tag:stardog:demo:aml:holds	150

# Node-Relationship-Node types
select ?st ?p ?ot (count(*) as ?count) {
  { # T-T
    ?s ?p ?o .
    ?s a ?st .
    ?o a ?ot .
  }
  union
  { # T-U
    ?s ?p ?o .
    ?s a ?st .
    bind (if (isBlank(?o), "<blank>", "<untyped>") as ?ot)
    filter not exists { ?o a ?t }
    filter (!isLiteral(?o))
    filter (?p != rdf:type)
  }
  union
  { # T-L
    ?s ?p ?o .
    ?s a ?st .
    bind (datatype(?o) as ?ot)
    filter (isLiteral(?o))
  }
  union
  { # U-T
    ?s ?p ?o .
    ?o a ?ot .
    bind (if (isBlank(?s), "<blank>", "<untyped>") as ?st)
    filter not exists { ?s a ?t }
  }
  union
  { # U-U
    ?s ?p ?o .
    bind (if (isBlank(?s), "<blank>", "<untyped>") as ?st)
    bind (if (isBlank(?o), "<blank>", "<untyped>") as ?ot)
    filter not exists { ?o a ?t }
    filter not exists { ?s a ?t }
    filter (!isLiteral(?o))
    filter (?p != rdf:type)
  }
  union
  { # U-L
    ?s ?p ?o .
    bind (if (isBlank(?s), "<blank>", "<untyped>") as ?st)
    bind (datatype(?o) as ?ot)
    filter not exists { ?s a ?t }
    filter (isLiteral(?o))
  }
}
group by ?st ?p ?ot
order by ?st desc(count(*)) ?p

tag:stardog:demo:aml:Address	tag:stardog:demo:aml:city	http://www.w3.org/2001/XMLSchema#string	1000
tag:stardog:demo:aml:Address	tag:stardog:demo:aml:country	http://www.w3.org/2001/XMLSchema#string	1000
tag:stardog:demo:aml:Address	tag:stardog:demo:aml:street	http://www.w3.org/2001/XMLSchema#string	1000
tag:stardog:demo:aml:Address	http://www.w3.org/2003/01/geo/wgs84_pos#lat	http://www.w3.org/2001/XMLSchema#decimal	997
tag:stardog:demo:aml:Address	http://www.w3.org/2003/01/geo/wgs84_pos#long	http://www.w3.org/2001/XMLSchema#decimal	997
tag:stardog:demo:aml:Address	tag:stardog:demo:aml:zipCode	http://www.w3.org/2001/XMLSchema#string	148
tag:stardog:demo:aml:BankAccount	tag:stardog:demo:aml:originated	<untyped>	73062
tag:stardog:demo:aml:BankAccount	tag:stardog:demo:aml:balance	http://www.w3.org/2001/XMLSchema#decimal	1999
tag:stardog:demo:aml:BankAccount	tag:stardog:demo:aml:number	http://www.w3.org/2001/XMLSchema#string	1999
tag:stardog:demo:aml:Company	tag:stardog:demo:aml:description	http://www.w3.org/2001/XMLSchema#string	1000
tag:stardog:demo:aml:Company	tag:stardog:demo:aml:hasAddress	tag:stardog:demo:aml:Address	1000
tag:stardog:demo:aml:Company	tag:stardog:demo:aml:name	http://www.w3.org/2001/XMLSchema#string	1000
tag:stardog:demo:aml:Company	tag:stardog:demo:aml:hasBankAccount	tag:stardog:demo:aml:BankAccount	662
tag:stardog:demo:aml:Company	tag:stardog:demo:aml:holds	<blank>	100
tag:stardog:demo:aml:Employee	tag:stardog:demo:aml:country	http://www.w3.org/2001/XMLSchema#string	50
tag:stardog:demo:aml:Employee	tag:stardog:demo:aml:email	http://www.w3.org/2001/XMLSchema#string	50
tag:stardog:demo:aml:Employee	tag:stardog:demo:aml:firstName	http://www.w3.org/2001/XMLSchema#string	50
tag:stardog:demo:aml:Employee	tag:stardog:demo:aml:hasAddress	tag:stardog:demo:aml:Address	50
tag:stardog:demo:aml:Employee	tag:stardog:demo:aml:lastName	http://www.w3.org/2001/XMLSchema#string	50
tag:stardog:demo:aml:Employee	tag:stardog:demo:aml:hasBankAccount	tag:stardog:demo:aml:BankAccount	23
tag:stardog:demo:aml:Employee	tag:stardog:demo:aml:holds	<blank>	2
tag:stardog:demo:aml:Person	tag:stardog:demo:aml:country	http://www.w3.org/2001/XMLSchema#string	1000
tag:stardog:demo:aml:Person	tag:stardog:demo:aml:email	http://www.w3.org/2001/XMLSchema#string	1000
tag:stardog:demo:aml:Person	tag:stardog:demo:aml:firstName	http://www.w3.org/2001/XMLSchema#string	1000
tag:stardog:demo:aml:Person	tag:stardog:demo:aml:hasAddress	tag:stardog:demo:aml:Address	1000
tag:stardog:demo:aml:Person	tag:stardog:demo:aml:lastName	http://www.w3.org/2001/XMLSchema#string	1000
tag:stardog:demo:aml:Person	tag:stardog:demo:aml:hasBankAccount	tag:stardog:demo:aml:BankAccount	551
tag:stardog:demo:aml:Person	tag:stardog:demo:aml:holds	<blank>	50
<blank>	tag:stardog:demo:aml:company	tag:stardog:demo:aml:Company	150
<blank>	tag:stardog:demo:aml:share	http://www.w3.org/2001/XMLSchema#integer	150
<untyped>	tag:stardog:demo:aml:amount	http://www.w3.org/2001/XMLSchema#integer	73062
<untyped>	tag:stardog:demo:aml:beneficiary	tag:stardog:demo:aml:BankAccount	73062
<untyped>	tag:stardog:demo:aml:date	http://www.w3.org/2001/XMLSchema#date	73062
prefix : <tag:stardog:demo:aml:>


# Find people without accounts
SELECT ?p
WHERE {
    ?p a :Person .
    FILTER NOT EXISTS {?p :hasBankAccount ?o}
}

# Same thing with virtual
select * {
  service <virtual://aml> {
    :BankAccount-4391-4466-9775-8814 :originated ?t .
    ?t :beneficiary :BankAccount-8201-8285-4081-3604 ;
       :amount ?a ;
       :date ?d
  }
}

# Find company holdings (no company should have > 100% shares outstanding)
select ?c (sum(?s) as ?total) {
 ?t :holds ?h .
 ?h :share ?s ;
    :company ?c .
}
group by ?c
order by desc (sum(?s))

# Find holdings for a specific set of companies
select * {
  ?t :holds ?h .
  ?h :share ?s ;
     :company ?c .
  filter (?c in (:Company-355,:Company-52,:Company-707))
}

# Find money transfers through a (single-hop) affiliated relationship (on each side of transfer), grouped by party pairs
select ?org ?ben (sum(?m) as ?s) {
  ?org a :Person ;
      :hasAffiliation ?t1 .
  ?t1 :hasBankAccount ?a1 .
  ?a1 :originated ?tx .
  ?tx :beneficiary ?a2 ;
      :amount ?m .
  ?t2 :hasBankAccount ?a2 .
  ?ben a :Person ;
      :hasAffiliation ?t2 .
}
group by ?org ?ben
order by desc(?s)
limit 50

# List all direct transfers between two specific people.
select * {
  :Person-992 :hasAffiliation ?b .
  ?b :hasBankAccount ?c .
  ?c :originated ?d .
  ?d :beneficiary ?e ;
    :amount ?m .
  ?f :hasBankAccount ?e .
  :Person-321 :hasAffiliation ?f .
}

# Find paths between two people
PATHS ALL 
START ?s = :Person-451 END ?e = :Person-506
VIA { {?s ?p ?e} UNION {?e ?p ?s} FILTER (?p not in (rdf:type) && !isLiteral(?e)) }
MAX LENGTH 8

# Find all transfers through affiliated relationships (includes cases where ?org = ?ben, excludes direct to direct, includes direct to indirect and inverse)
select ?org ?ben (sum(?m) as ?s) {
    ?org a :Person ;
        :hasAffiliation* ?t1 .
    ?t1 :hasBankAccount ?a1 .
    ?a1 :originated ?tx .
    ?tx :beneficiary ?a2 ;
        :amount ?m .
    ?t2 :hasBankAccount ?a2 ;
        :hasAffiliation* ?ben .
    ?ben a :Person .
    # Nothing suspicious about direct transfers
    filter (?org != ?t1 || ?ben != ?t2)
}
group by ?org ?ben
order by desc(?s)
limit 100

# Score fraud indicator as $ x (paths count)^2
select * {
    {
        # Count distint paths
        select ?org ?ben ?s (count(*) as ?c) {
            {
                # Group by intermediaries
                select ?org ?ben ?t1 ?t2 ?s {
                    ?org :hasAffiliation* ?t1 .
                    ?t1 :hasBankAccount ?a1 .
                    ?a1 :originated ?tx .
                    ?tx :beneficiary ?a2 .
                    ?t2 :hasBankAccount ?a2 ;
                        :hasAffiliation* ?ben .
                    {
                        # Find highest sum of Tx for all paths between org and ben
                        select ?org ?ben (sum(?m) as ?s) {
                            ?org a :Person ;
                                :hasAffiliation* ?t1 .
                            ?t1 :hasBankAccount ?a1 .
                            ?a1 :originated ?tx .
                            ?tx :beneficiary ?a2 ;
                                :amount ?m .
                            ?t2 :hasBankAccount ?a2 ;
                                :hasAffiliation* ?ben .
                            ?ben a :Person .
                        }
                        group by ?org ?ben
                        order by desc(?s) ?org ?ben
                        limit 1000
                    }
                }
                group by ?org ?ben ?t1 ?t2 ?s
            }
        }
        group by ?org ?ben ?s
        order by desc(?s) ?org ?ben
    }
    bind(?s * ?c * ?c as ?z)
}
order by desc(?z) ?org ?ben


# Find all paths emanating from a specific person (turn reasoning off)
PREFIX : <tag:stardog:demo:aml:>
PATHS ALL 
START ?s = :Person-67 END ?e
VIA { {?s ?p ?e} UNION {?e ?p ?s} FILTER (?p not in (rdf:type) && !isLiteral(?e)) }
MAX LENGTH 4


# Find money transfers through an affiliated relationship using virtual transaction data
select ?org ?ben (sum(?m) as ?s) {
    ?org a :Person ;
        :hasAffiliation ?t1 .
    ?t1 :hasBankAccount ?a1 .
    ?t2 :hasBankAccount ?a2 .
    ?ben a :Person ;
        :hasAffiliation ?t2 .

    graph <virtual://aml> 
    {
        ?a1 :originated ?tx .
        ?tx :beneficiary ?a2 ;
            :amount ?m .
    }
}
group by ?org ?ben
order by desc(?s)
limit 50

# Prior query (necessarily) transfers all Tx data to Stardog
Slice(offset=0, limit=50) [#50]
`─ Distinct [#536K]
   `─ Projection(?org, ?ben, ?s) [#536K]
      `─ OrderBy(DESC(?s), offset=0, limit=50) [#536K]
         `─ Group(by=[?org, ?ben] aggregates=[(SUM(?m) AS ?s)]) [#536K]
            `─ Distinct [#2.1M]
               `─ Projection(?tx, ?m, ?a2, ?a1, ?org, ?t1, ?ben, ?t2) [#2.1M]
                  `─ HashJoin(?a1) [#2.1M]
                     +─ ServiceJoin(?a2) [#945]
                     │  +─ VirtualGraphSql<virtual://aml> [#17084] {
                     │  │  +─    SELECT `tx_id` AS `F_1`, `account1` AS `F_0`, `account2` AS `F_6`, `amount` AS `F_5`
                     │  │  +─    FROM `transactions`
                     │  │  +─    WHERE `amount` IS NOT NULL AND `account2` IS NOT NULL AND `account1` IS NOT NULL
                     │  │  }
                     │  `─ Union [#472]
                     │     +─ MergeJoin(?t2) [#1]
                     │     │  +─ Sort(?t2) [#1]
                     │     │  │  `─ MergeJoin(?ftfvcxmi) [#1]
                     │     │  │     +─ Sort(?ftfvcxmi) [#1]
                     │     │  │     │  `─ MergeJoin(?ben) [#1]
                     │     │  │     │     +─ Scan[POS](?ben, rdf:type, <tag:stardog:demo:aml:Person>) [#1.0K]
                     │     │  │     │     `─ Scan[POS](?ftfvcxmi, <tag:stardog:demo:aml:company>, ?ben) [#163]
                     │     │  │     `─ Scan[POS](?t2, <tag:stardog:demo:aml:holds>, ?ftfvcxmi) [#163]
                     │     │  `─ Scan[PSO](?t2, <tag:stardog:demo:aml:hasBankAccount>, ?a2) [#1.2K]
                     │     `─ Union [#471]
                     │        +─ MergeJoin(?t2) [#37]
                     │        │  +─ Sort(?t2) [#58]
                     │        │  │  `─ MergeJoin(?lekfzjnk) [#58]
                     │        │  │     +─ Sort(?lekfzjnk) [#58]
                     │        │  │     │  `─ MergeJoin(?ben) [#58]
                     │        │  │     │     +─ Scan[POS](?ben, rdf:type, <tag:stardog:demo:aml:Person>) [#1.0K]
                     │        │  │     │     `─ Scan[PSO](?ben, <tag:stardog:demo:aml:holds>, ?lekfzjnk) [#163]
                     │        │  │     `─ Scan[PSO](?lekfzjnk, <tag:stardog:demo:aml:company>, ?t2) [#163]
                     │        │  `─ Scan[PSO](?t2, <tag:stardog:demo:aml:hasBankAccount>, ?a2) [#1.2K]
                     │        `─ Filter(?ben != ?t2) [#433]
                     │           `─ HashJoin(?qvtaizhx) [#867]
                     │              +─ MergeJoin(?t2) [#1.2K]
                     │              │  +─ Scan[PSO](?t2, <tag:stardog:demo:aml:hasBankAccount>, ?a2) [#1.2K]
                     │              │  `─ Scan[PSO](?t2, <tag:stardog:demo:aml:hasAddress>, ?qvtaizhx) [#2.0K]
                     │              `─ MergeJoin(?ben) [#997]
                     │                 +─ Scan[POS](?ben, rdf:type, <tag:stardog:demo:aml:Person>) [#1.0K]
                     │                 `─ Scan[PSO](?ben, <tag:stardog:demo:aml:hasAddress>, ?qvtaizhx) [#2.0K]
                     `─ Union [#472]
                        +─ MergeJoin(?t1) [#1]
                        │  +─ Sort(?t1) [#1]
                        │  │  `─ MergeJoin(?umhpkpqv) [#1]
                        │  │     +─ Sort(?umhpkpqv) [#1]
                        │  │     │  `─ MergeJoin(?org) [#1]
                        │  │     │     +─ Scan[POS](?org, rdf:type, <tag:stardog:demo:aml:Person>) [#1.0K]
                        │  │     │     `─ Scan[POS](?umhpkpqv, <tag:stardog:demo:aml:company>, ?org) [#163]
                        │  │     `─ Scan[POS](?t1, <tag:stardog:demo:aml:holds>, ?umhpkpqv) [#163]
                        │  `─ Scan[PSO](?t1, <tag:stardog:demo:aml:hasBankAccount>, ?a1) [#1.2K]
                        `─ Union [#471]
                           +─ MergeJoin(?t1) [#37]
                           │  +─ Sort(?t1) [#58]
                           │  │  `─ MergeJoin(?pnufoeol) [#58]
                           │  │     +─ Sort(?pnufoeol) [#58]
                           │  │     │  `─ MergeJoin(?org) [#58]
                           │  │     │     +─ Scan[POS](?org, rdf:type, <tag:stardog:demo:aml:Person>) [#1.0K]
                           │  │     │     `─ Scan[PSO](?org, <tag:stardog:demo:aml:holds>, ?pnufoeol) [#163]
                           │  │     `─ Scan[PSO](?pnufoeol, <tag:stardog:demo:aml:company>, ?t1) [#163]
                           │  `─ Scan[PSO](?t1, <tag:stardog:demo:aml:hasBankAccount>, ?a1) [#1.2K]
                           `─ Filter(?org != ?t1) [#433]
                              `─ HashJoin(?pgdtwbqm) [#867]
                                 +─ MergeJoin(?t1) [#1.2K]
                                 │  +─ Scan[PSO](?t1, <tag:stardog:demo:aml:hasAddress>, ?pgdtwbqm) [#2.0K]
                                 │  `─ Scan[PSO](?t1, <tag:stardog:demo:aml:hasBankAccount>, ?a1) [#1.2K]
                                 `─ MergeJoin(?org) [#997]
                                    +─ Scan[POS](?org, rdf:type, <tag:stardog:demo:aml:Person>) [#1.0K]
                                    `─ Scan[PSO](?org, <tag:stardog:demo:aml:hasAddress>, ?pgdtwbqm) [#2.0K]


# Materialize (store in Stardog natively) rolled-up Tx data from date range
insert {
    ?a1 :originated [
        :beneficiary ?a2 ;
        :amount ?msum ;
        :date ?date
    ]
}
where {
    select * {
        graph <virtual://aml> 
        {
            select ?a1 ?a2 (sum(?m) as ?msum) ('2017-08-31'^^xsd:date as ?date) {
                ?a1 :originated ?tx .
                ?tx :beneficiary ?a2 ;
                    :amount ?m ;
                    :date ?d .
                # Could save roll-up Tx for (say) each quarter, or could merge into single Tx per account pair
                filter (?d < '2017-09-01'^^xsd:date)
            }
            group by ?a1 ?a2
        }
    }
}

# Find money transfers through an affiliated relationship using hybrid materialized/virtual transaction data
select ?org ?ben (sum(?m) as ?s) {
    ?org a :Person ;
        :hasAffiliation ?t1 .
    ?t1 :hasBankAccount ?a1 .
    ?t2 :hasBankAccount ?a2 .
    ?ben a :Person ;
        :hasAffiliation ?t2 .
    {
        ?a1 :originated ?tx .
        ?tx :beneficiary ?a2 ;
            :amount ?m ;
            :date ?d
        filter (?d < '2017-09-01'^^xsd:date)
    }
    union
    {
        graph <virtual://aml> {
            ?a1 :originated ?tx .
            ?tx :beneficiary ?a2 ;
                :amount ?m ;
                :date ?d
            filter (?d >= '2017-09-01'^^xsd:date)
        }
    }
}
group by ?org ?ben
order by desc(?s)
limit 50


# Big Daddy - score fraud indicator as $ x (paths count)^2 - using hybrid materialized/virtual transaction data
select * {
    {
        # Count distint paths
        select ?org ?ben ?s (count(*) as ?c) {
            {
                # Group by intermediaries
                select ?org ?ben ?t1 ?t2 ?s {
                    ?org :hasAffiliation* ?t1 .
                    ?t1 :hasBankAccount ?a1 .
                    ?a1 :originated ?tx .
                    ?tx :beneficiary ?a2 .
                    ?t2 :hasBankAccount ?a2 ;
                        :hasAffiliation* ?ben .
                    {
                        # Find highest sum of Tx for all paths between org and ben
                        select ?org ?ben (sum(?m) as ?s) {
                            ?org a :Person ;
                                :hasAffiliation* ?t1 .
                            ?t1 :hasBankAccount ?a1 .
                            ?t2 :hasBankAccount ?a2 ;
                                :hasAffiliation* ?ben .
                            ?ben a :Person .
                            # Combine older summarized Tx from Stardog and newer itemized Tx from virtual source
                            {
                                ?a1 :originated ?tx .
                                ?tx :beneficiary ?a2 ;
                                    :amount ?m ;
                                    :date ?d
                                filter (?d < '2017-09-01'^^xsd:date)
                            }
                            union
                            {
                                graph <virtual://aml> {
                                    ?a1 :originated ?tx .
                                    ?tx :beneficiary ?a2 ;
                                        :amount ?m ;
                                        :date ?d
                                    filter (?d >= '2017-09-01'^^xsd:date)
                                }
                            }
                        }
                        group by ?org ?ben
                        order by desc(?s) ?org ?ben
                        limit 1000
                    }
                }
                group by ?org ?ben ?t1 ?t2 ?s
            }
        }
        group by ?org ?ben ?s
        order by desc(?s) ?org ?ben
    }
    bind(?s * ?c * ?c as ?z)
}
order by desc(?z) ?org ?ben

